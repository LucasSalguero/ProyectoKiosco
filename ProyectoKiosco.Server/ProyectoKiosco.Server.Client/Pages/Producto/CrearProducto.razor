@page "/listaproducto/crearproducto"
@inject IHttpServicio Http
@inject NavigationManager navHttp

<h3>Crear Producto</h3>

<EditForm Model="producto" OnValidSubmit="Grabar">
    <DataAnnotationsValidator />
    <div class=" form-group">
        <label>CodigoProducto</label>
        <div>
            <InputText class="form-control" @bind-Value="producto.CodigoProducto" />
            <ValidationMessage For="@(() => producto.CodigoProducto)" />
        </div>
    </div>

    <div class=" form-group">
        <label>Nombre</label>
        <div>
            <InputText class="form-control" @bind-Value="producto.Nombre" />
            <ValidationMessage For="@(() => producto.Nombre)" />
        </div>
    </div>

    <div class=" form-group">
        <label>Cantidad</label>
        <div>
            <InputNumber class="form-control" @bind-Value="producto.Cantidad" />
            <ValidationMessage For="@(() => producto.Cantidad)" />
        </div>
    </div>


    <div class=" form-group">
        <label>Precio</label>
        <div>
            <InputNumber class="form-control" @bind-Value="producto.Precio" />
            <ValidationMessage For="@(() => producto.Precio)" />
        </div>
    </div>


    <button class="btn btn-primary" type="submit">Aceptar</button>
    <button class="btn btn-primary" @onclick="Cancelar">Cancelar</button>

</EditForm>
<br />
<p>@Mensaje</p>


@code {

    private ProductoDTO producto = new ProductoDTO();
    string Mensaje = "";

    private async Task Grabar()
    {
        var httpResp = await Http.Post<ProductoDTO, int>("api/producto", producto);
        if (!httpResp.Error)
        {
            navHttp.NavigateTo("/listaproducto");
        }
        else
        {
            // Manejar el error (mostrar mensaje, etc.)
            Mensaje = httpResp.ObtenerError();
        }
    }
    private async Task Cancelar()
    {
        navHttp.NavigateTo("/listaproducto");
    }
}
