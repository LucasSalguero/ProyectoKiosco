@inject IHttpServicio Http

<div class="container mt-4">
    <div class="card shadow-sm border-0 rounded-3 p-4">
        <div class="d-flex align-items-center mb-3">
            <i class="bi bi-currency-dollar fs-3 text-success me-2"></i>
            <h4 class="fw-bold mb-0">Editar Precio</h4>
        </div>

        <p class="text-muted mb-4">Modificá el precio del producto y guardá los cambios.</p>

        <div class="mb-3">
            <label for="nuevoPrecio" class="form-label fw-semibold">Nuevo precio</label>
            <InputNumber id="nuevoPrecio" @bind-Value="NuevoPrecio" class="form-control shadow-sm" />
        </div>

        <div class="mt-4 d-flex justify-content-end">
            <button class="btn btn-success me-2 px-4 shadow-sm" @onclick="GuardarCambios">
                <i class="bi bi-check-circle me-1"></i> Guardar
            </button>
            <button class="btn btn-secondary px-4 shadow-sm" @onclick="Cancelar">
                <i class="bi bi-x-circle me-1"></i> Cancelar
            </button>
        </div>
    </div>
</div>
@code {
    [Parameter] public int ProductoId { get; set; }
    [Parameter] public decimal PrecioActual { get; set; }
    [Parameter] public EventCallback OnGuardado { get; set; }
    [Parameter] public EventCallback OnCancelado { get; set; }

    private decimal NuevoPrecio;

    protected override void OnInitialized()
    {
        NuevoPrecio = PrecioActual;
    }

    private async Task GuardarCambios()
    {        
        var dto = new ProductoCambiarPrecioDTO
        {
            Id = ProductoId,
            NuevoPrecio = NuevoPrecio
        };
        
        var respuesta = await Http.Put<ProductoCambiarPrecioDTO, object>($"api/producto/{ProductoId}/cambiarprecio", dto);

        if (!respuesta.Error)
        {
            await OnGuardado.InvokeAsync();
        }
        else
        {
            Console.WriteLine("Error al actualizar precio");
        }
    }

    private async Task Cancelar()
    {
        await OnCancelado.InvokeAsync();
    }
}
