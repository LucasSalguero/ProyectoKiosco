@page "/listaproducto"
@inject IHttpServicio Http
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold">Lista de Productos</h2>
        <a class="btn btn-primary shadow-sm px-3" href="/listaproducto/crearproducto">
            <i class="bi bi-plus-circle me-1"></i> Nuevo producto
        </a>
    </div>

    @if (productoEditando != null)
    {
        <EditarProducto ProductoId="productoEditando.Id"
                        PrecioActual="productoEditando.Precio"
                        OnGuardado="LeerProductos"
                        OnCancelado="CancelarEdicion" />
    }

    @if (productos == null)
    {
        <div class="alert alert-secondary text-center shadow-sm">
            Buscando productos...
        </div>
    }
    else if (productos.Count == 0)
    {
        <div class="alert alert-info text-center shadow-sm">
            No existen productos cargados en esta lista.
        </div>
    }
    else
    {
        <div class="card shadow-sm border-0 rounded-3">
            <div class="card-body p-0">
                <table class="table table-hover align-middle mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Producto</th>
                            <th>Precio</th>
                            <th class="text-center">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var producto in productos)
                        {
                            <tr>
                                <td class="fw-semibold">@producto.Nombre</td>
                                <td>$@producto.Precio.ToString("N2")</td>
                                <td class="text-center">
                                    <button class="btn btn-sm btn-outline-primary me-2"
                                            @onclick="() => Editar(producto)">
                                        <i class="bi bi-pencil-square"></i> Editar
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger"
                                            @onclick="() => Eliminar(producto)">
                                        <i class="bi bi-trash"></i> Eliminar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

    <br />
    <p class="text-muted">@Mensaje</p>

    <Confirmacion @ref="confirmacion"
                  Titulo="Cuidado"
                  textOk="Aceptar"
                  textCancelar="No borrar"
                  onConfirm="Borrar"
                  onCancel="Cancelar">
        <div class="text-center">
            <p class="mb-2">Está por borrar un producto.</p>
            <p>¿Está seguro?</p>
        </div>
    </Confirmacion>
</div>
@code {
    List<ProductoListadoDTO>? productos;
    string Mensaje = "";
    Confirmacion confirmacion;
    ProductoListadoDTO productoSeleccionado = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LeerProductos();
    }

    private async Task LeerProductos()
    {
        productoEditando = null;
        var resp = await Http.Get<List<ProductoListadoDTO>>("api/producto/listaproducto");
        // productos = await Http.GetFromJsonAsync<List<ProductoListadoDTO>>("api/producto/listaproducto");

        if (!resp.Error)
        {
            productos = resp.Respuesta;
        }
        else
        {
            Mensaje = resp.ObtenerError();
        }
            
    }

    private async Task Borrar()
    {
        var resp = await Http.Delete($"api/producto/{productoSeleccionado.Id}");
        if (!resp.Error)
        {
            await LeerProductos();
        }
        else
        {
            Mensaje = resp.ObtenerError();
        }
        productoSeleccionado = null;
        confirmacion.Ocultar();
        await LeerProductos();
    }
    
    private async Task Eliminar(ProductoListadoDTO producto)
    {
        productoSeleccionado = producto;
        confirmacion.Ver();
    }

    private void Cancelar()
    {
        confirmacion.Ocultar();
        productoSeleccionado = null;

    }

    private ProductoListadoDTO productoEditando;

    private void Editar(ProductoListadoDTO p)
    {
        productoEditando = p;
    }

    // private async Task RefrescarLista()
    // {
    //     productoEditando = null;
    //     var resp = await Http.Get<List<ProductoListadoDTO>>("api/producto/listaproducto");
    //     if (!resp.Error)
    //     {
    //         productos = resp.Respuesta;
    //     }
    // }

    private void CancelarEdicion()
    {
        productoEditando = null;
    }



}
